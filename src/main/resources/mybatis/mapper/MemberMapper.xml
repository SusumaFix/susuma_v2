<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.susuma.member.model.MemberMapper">

	<sql id="whereClauseForDistance">
		(6371 * acos(cos(RADIANS(#{latitude})) * cos(RADIANS(M.LATITUDE)) * cos(RADIANS(M.LONGITUDE) - RADIANS(#{longitude})) + sin(RADIANS(#{latitude})) * sin(RADIANS(M.LATITUDE))))
	</sql>

	<select id="selectMembers" parameterType="map" resultType="com.susuma.member.model.MemberDTO">
		SELECT ME_NO, TYPE, EMAIL, PW, NAME, ADDRESS, ADDRESS_DETAIL, LATITUDE, LONGITUDE, PHONE_NUM,
		EMAIL_NOTIFICATION, PROFILE_PHOTO, JOIN_APPROVAL, JOIN_APPROVAL_TIME,
		BUSINESS_NUMBER, SHORT_DESCRIPTION, MAX_DISTANCE, DESCRIPTION,
		WORK_HOURS, POINT, STATUS, M.INSERT_TIME, M.UPDATE_TIME,
		C.CA_NO, C.CA_NAME, CR.CA_NO AS CA_ROOT_NO, CR.CA_NAME AS CA_ROOT_NAME,
		RESULT.AVERAGE_SCORE, RESULT.REVIEW_COUNT,
		<include refid="whereClauseForDistance" /> AS DISTANCE
		FROM MEMBER M
		LEFT JOIN CATEGORY C ON C.CA_NO = M.CA_NO
		LEFT JOIN CATEGORY CR ON CR.CA_NO = C.ROOT_NO
		LEFT JOIN (
		SELECT MASTER_NO, ROUND(AVG(STAR_SCORE), 2) AS AVERAGE_SCORE, COUNT(STAR_SCORE) AS REVIEW_COUNT
		FROM REVIEW R INNER JOIN REQUEST R2 ON R.REQ_NO = R2.REQ_NO
		GROUP BY MASTER_NO
		) RESULT ON M.ME_NO = RESULT.MASTER_NO
		WHERE M.TYPE = #{type}
		<if test="joinApproval != 'all'"> AND M.JOIN_APPROVAL = #{joinApproval} </if>
		<if test="rootNo != 'all'"> AND CR.CA_NO = <choose><when test="rootNo != ''">CAST(#{rootNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> </if>
		<if test="rootNo != 'all' and caNo != 'all'"> AND C.CA_NO = <choose><when test="caNo != ''">CAST(#{caNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> </if>
		<if test="maxDistance != null and maxDistance != ''">
			AND <include refid="whereClauseForDistance" /> &lt;= <choose><when test="maxDistance != ''">CAST(#{maxDistance} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
		</if>
		<if test='sortField != "AVERAGE_SCORE"'> ORDER BY M.${sortField} ${sortOrder} NULLS LAST </if>
		<if test='sortField == "AVERAGE_SCORE"'> ORDER BY RESULT.AVERAGE_SCORE ${sortOrder} NULLS LAST </if>
		LIMIT (#{endRow} - #{startRow} + 1) OFFSET (#{startRow} - 1)
	</select>

	<select id="countMembers" parameterType="map" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER M
		LEFT JOIN CATEGORY C ON C.CA_NO = M.CA_NO
		LEFT JOIN CATEGORY CR ON CR.CA_NO = C.ROOT_NO
		WHERE M.TYPE = #{type}
		<if test="joinApproval != 'all'"> AND M.JOIN_APPROVAL = #{joinApproval} </if>
		<if test="rootNo != 'all'"> AND CR.CA_NO = <choose><when test="rootNo != ''">CAST(#{rootNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> </if>
		<if test="rootNo != 'all' and caNo != 'all'"> AND C.CA_NO = <choose><when test="caNo != ''">CAST(#{caNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> </if>
		<if test="maxDistance != null and maxDistance != ''">
			AND <include refid="whereClauseForDistance" /> &lt;= <choose><when test="maxDistance != ''">CAST(#{maxDistance} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
		</if>
	</select>

	<select id="selectMember" parameterType="map" resultType="com.susuma.member.model.MemberDTO">
		SELECT ME_NO, TYPE, EMAIL, PW, NAME, ADDRESS, ADDRESS_DETAIL,
		LATITUDE, LONGITUDE, PHONE_NUM, EMAIL_NOTIFICATION, PROFILE_PHOTO,
		JOIN_APPROVAL, JOIN_APPROVAL_TIME, BUSINESS_NUMBER, SHORT_DESCRIPTION,
		MAX_DISTANCE, DESCRIPTION, WORK_HOURS, POINT, STATUS, M.INSERT_TIME,
		M.UPDATE_TIME, C.CA_NO, C.CA_NAME, CR.CA_NO AS CA_ROOT_NO, CR.CA_NAME AS CA_ROOT_NAME,
		RESULT.AVERAGE_SCORE, RESULT.REVIEW_COUNT,
		(SELECT STRING_AGG(REQUEST_DATE || ' ' || REQUEST_TIME, ',' ORDER BY REQUEST_DATE, REQUEST_TIME)
		FROM REQUEST
		WHERE MASTER_NO = ME_NO AND STATUS != 'cancel'
		) AS REQUEST_DATETIME
		FROM MEMBER M
		LEFT JOIN CATEGORY C ON C.CA_NO = M.CA_NO
		LEFT JOIN CATEGORY CR ON CR.CA_NO = C.ROOT_NO
		LEFT JOIN (
		SELECT MASTER_NO, ROUND(AVG(STAR_SCORE), 2) AS AVERAGE_SCORE, COUNT(STAR_SCORE) AS REVIEW_COUNT
		FROM REVIEW R INNER JOIN REQUEST R2 ON R.REQ_NO = R2.REQ_NO
		GROUP BY MASTER_NO
		) RESULT ON M.ME_NO = RESULT.MASTER_NO
		WHERE 1 = 1
		<if test="meNo != null"> AND M.ME_NO = <choose><when test="meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> </if>
		<if test="email != null and pw != null"> AND M.EMAIL = #{email} AND M.PW = #{pw} </if>
		<if test="email != null and pw == null"> AND M.EMAIL = #{email} </if>
	</select>

	<insert id="insertMember" parameterType="com.susuma.member.model.MemberDTO">
		INSERT INTO MEMBER (ME_NO, TYPE, EMAIL, PW, NAME, PHONE_NUM, ADDRESS, ADDRESS_DETAIL, LATITUDE, LONGITUDE, EMAIL_NOTIFICATION, PROFILE_PHOTO, BUSINESS_NUMBER, SHORT_DESCRIPTION, MAX_DISTANCE, DESCRIPTION, WORK_HOURS, CA_NO, JOIN_APPROVAL, POINT, STATUS)
		VALUES (
		nextval('member_seq'), #{type}, #{email}, #{pw}, #{name}, #{phoneNum}, #{address}, #{addressDetail},
		<choose><when test="latitude != null and latitude != ''">CAST(#{latitude} AS NUMERIC)</when><otherwise>NULL</otherwise></choose>,
		<choose><when test="longitude != null and longitude != ''">CAST(#{longitude} AS NUMERIC)</when><otherwise>NULL</otherwise></choose>,
		#{emailNotification}, #{profilePhoto, jdbcType=BLOB}, #{businessNumber}, #{shortDescription},
		<choose><when test="maxDistance != null and maxDistance != ''">CAST(#{maxDistance} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		#{description}, #{workHours},
		<choose><when test="caNo != null and caNo != ''">CAST(#{caNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		#{joinApproval},
		<choose><when test="point != null and point != ''">CAST(#{point} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		#{status}
		)
	</insert>

	<update id="updateMember" parameterType="com.susuma.member.model.MemberDTO">
		UPDATE MEMBER
		<set>
			<if test="email != null"> EMAIL = #{email}, </if>
			<if test="pw != null"> PW = #{pw}, </if>
			<if test="name != null"> NAME = #{name}, </if>
			<if test="phoneNum != null"> PHONE_NUM = #{phoneNum}, </if>
			<if test="address != null"> ADDRESS = #{address}, </if>
			<if test="addressDetail != null"> ADDRESS_DETAIL = #{addressDetail}, </if>
			<if test="latitude != null"> LATITUDE = <choose><when test="latitude != ''">CAST(#{latitude} AS NUMERIC)</when><otherwise>NULL</otherwise></choose>, </if>
			<if test="longitude != null"> LONGITUDE = <choose><when test="longitude != ''">CAST(#{longitude} AS NUMERIC)</when><otherwise>NULL</otherwise></choose>, </if>
			<if test="emailNotification != null"> EMAIL_NOTIFICATION = #{emailNotification}, </if>
			<if test="profilePhoto != null"> PROFILE_PHOTO = #{profilePhoto, jdbcType=BLOB}, </if>
			<if test="businessNumber != null"> BUSINESS_NUMBER = #{businessNumber}, </if>
			<if test="shortDescription != null"> SHORT_DESCRIPTION = #{shortDescription}, </if>
			<if test="maxDistance != null"> MAX_DISTANCE = <choose><when test="maxDistance != ''">CAST(#{maxDistance} AS INTEGER)</when><otherwise>NULL</otherwise></choose>, </if>
			<if test="description != null"> DESCRIPTION = #{description}, </if>
			<if test="workHours != null"> WORK_HOURS = #{workHours}, </if>
			<if test="caNo != null"> CA_NO = <choose><when test="caNo != ''">CAST(#{caNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>, </if>
			<if test="joinApproval != null"> JOIN_APPROVAL = #{joinApproval}, </if>
			<if test="point != null"> POINT = <choose><when test="point != ''">CAST(#{point} AS INTEGER)</when><otherwise>NULL</otherwise></choose>, </if>
			<if test="status != null"> STATUS = #{status}, </if>
			UPDATE_TIME = NOW()
		</set>
		WHERE ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</update>

	<update id="updateMemberApprove" parameterType="string">
		UPDATE MEMBER
		SET JOIN_APPROVAL = 'Y', JOIN_APPROVAL_TIME = NOW()
		WHERE ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</update>

	<delete id="deleteMember" parameterType="string">
		DELETE FROM MEMBER WHERE ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</delete>

	<select id="getPassword" parameterType="string" resultType="string">
		SELECT pw FROM MEMBER WHERE ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</select>

	<select id="selectMain" resultType="com.susuma.member.model.MemberDTO">
		SELECT M.ME_NO, M.NAME, M.ADDRESS, M.PROFILE_PHOTO, M.SHORT_DESCRIPTION, M.MAX_DISTANCE,
			   RESULT.AVERAGE_SCORE, RESULT.REVIEW_COUNT, CR.CA_NAME AS CA_ROOT_NAME, C.CA_NAME
		FROM MEMBER M
				 JOIN (
			SELECT MASTER_NO, ROUND(AVG(STAR_SCORE), 2) AS AVERAGE_SCORE, COUNT(STAR_SCORE) AS REVIEW_COUNT
			FROM REVIEW R INNER JOIN REQUEST R2 ON R.REQ_NO = R2.REQ_NO
			GROUP BY MASTER_NO
		) RESULT ON M.ME_NO = RESULT.MASTER_NO
				 JOIN CATEGORY C ON C.CA_NO = M.CA_NO
				 JOIN CATEGORY CR ON CR.CA_NO = C.ROOT_NO
			LIMIT 3
	</select>

	<select id="selectMainRe" resultType="com.susuma.member.model.MemberDTO">
		SELECT RE.REQ_NO, MASTER_NO, MM.NAME AS MASTER_NAME, MM.PROFILE_PHOTO, MC.NAME AS CLIENT_NAME, RE.CONTENT, RE.STAR_SCORE, RE.INSERT_TIME
		FROM REVIEW RE
				 JOIN REQUEST REQ ON RE.REQ_NO = REQ.REQ_NO
				 JOIN MEMBER MM ON MM.ME_NO = REQ.MASTER_NO
				 JOIN MEMBER MC ON MC.ME_NO = REQ.CLIENT_NO
		ORDER BY RE.RE_NO DESC
			LIMIT 3
	</select>

	<select id="selectMasterre" resultType="com.susuma.member.model.MemberDTO">
		SELECT RE.REQ_NO, MASTER_NO, MM.NAME AS MASTER_NAME, MC.PROFILE_PHOTO, MC.NAME AS CLIENT_NAME, RE.CONTENT, RE.STAR_SCORE, RE.INSERT_TIME
		FROM REVIEW RE
		JOIN REQUEST REQ ON RE.REQ_NO = REQ.REQ_NO
		JOIN MEMBER MM ON MM.ME_NO = REQ.MASTER_NO
		JOIN MEMBER MC ON MC.ME_NO = REQ.CLIENT_NO
		WHERE MM.ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
		ORDER BY RE.RE_NO DESC
	</select>

	<select id="MemberPoints" parameterType="String" resultType="Integer">
		SELECT point FROM MEMBER WHERE ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</select>

	<select id="getPointSpendings" resultType="com.susuma.member.model.MemberDTO">
		SELECT req_no AS meNo, pay_amount AS point, paid_time AS insertTime
		FROM REQUEST
		WHERE client_no = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
		AND pay_status = 'Y'
		ORDER BY paid_time DESC
	</select>

	<select id="getPointEarnings" resultType="com.susuma.member.model.MemberDTO">
		SELECT point, pc_time as insert_time
		FROM POINT_HISTORY
		WHERE me_no = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> AND point > 0
		UNION ALL
		SELECT -pay_amount as point, paid_time as insert_time
		FROM REQUEST
		WHERE master_no = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> AND pay_status = 'Y'
		ORDER BY insert_time DESC
	</select>

	<select id="getMinus" resultType="com.susuma.member.model.MemberDTO">
		SELECT point, pc_time as insert_time
		FROM POINT_HISTORY
		WHERE me_no = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> AND point &lt; 0
		UNION ALL
		SELECT pay_amount as point, paid_time as insert_time
		FROM REQUEST
		WHERE client_no = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose> AND pay_status = 'Y'
		ORDER BY insert_time DESC
	</select>

	<update id="updateMemberPoints">
		UPDATE MEMBER
		SET point = <choose><when test="point != null and point != ''">CAST(#{point} AS INTEGER)</when><otherwise>point</otherwise></choose>
		WHERE me_no = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</update>

	<insert id="addSpendingHistory">
		INSERT INTO POINT_HISTORY (pc_no, me_no, point, pc_time)
		VALUES (
		nextval('point_history_seq'),
		<choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		<choose><when test="point != null and point != ''">CAST(#{point} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		NOW()
		)
	</insert>

	<insert id="addEarningHistory">
		INSERT INTO POINT_HISTORY (pc_no, me_no, point, pc_time)
		VALUES (
		nextval('point_history_seq'),
		<choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		<choose><when test="point != null and point != ''">CAST(#{point} AS INTEGER)</when><otherwise>NULL</otherwise></choose>,
		NOW()
		)
	</insert>

	<update id="updatePw" parameterType="com.susuma.member.model.MemberDTO">
		UPDATE MEMBER SET PW = #{pw} WHERE EMAIL=#{email}
	</update>

	<select id="selectLaLo" resultType="com.susuma.member.model.MemberDTO">
		SELECT LATITUDE,LONGITUDE FROM MEMBER WHERE ME_NO = <choose><when test="meNo != null and meNo != ''">CAST(#{meNo} AS INTEGER)</when><otherwise>NULL</otherwise></choose>
	</select>

</mapper>